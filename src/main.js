/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => LowercaseFilesPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var path = __toESM(require("path"));
var DEFAULT_SETTINGS = {
  lastSelectedFolder: "",
  lowercaseAction: "name",
  uppercaseAction: "name",
  capitalizeAction: "name"
};
var LowercaseFilesPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    const ribbonIconEl = this.addRibbonIcon("case-sensitive", "File Case Converter", (evt) => {
      new FolderSelectionModal(this.app, this).open();
    });
    ribbonIconEl.addClass("lowercase-files-ribbon-class");
    this.addCommand({
      id: "open-file-case-converter-modal",
      name: "Open File Case Converter Panel",
      callback: () => {
        new FolderSelectionModal(this.app, this).open();
      }
    });
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        if (file instanceof import_obsidian.TFile || file instanceof import_obsidian.TFolder) {
          if (this.settings.lowercaseAction === "name") {
            menu.addItem((item) => {
              item.setTitle("Lowercase name").setIcon("type").onClick(async () => {
                await this.lowercaseSingleItem(file);
              });
            });
          }
          if (this.settings.uppercaseAction === "name") {
            menu.addItem((item) => {
              item.setTitle("Uppercase name").setIcon("type").onClick(async () => {
                await this.uppercaseSingleItem(file);
              });
            });
          }
          if (this.settings.capitalizeAction === "name") {
            menu.addItem((item) => {
              item.setTitle("Capitalize name").setIcon("type").onClick(async () => {
                await this.capitalizeSingleItem(file);
              });
            });
          }
          if (file instanceof import_obsidian.TFolder) {
            if (this.settings.lowercaseAction === "all") {
              menu.addItem((item) => {
                item.setTitle("Lowercase all files in folder").setIcon("folder-down").onClick(async () => {
                  const confirmed = await this.showQuickConfirmation(
                    `Lowercase all files and folders in "${file.name}"?`,
                    "This will recursively lowercase all files and subfolders. This cannot be undone."
                  );
                  if (confirmed) {
                    await this.lowercaseFilesRecursively(file.path);
                  }
                });
              });
            }
            if (this.settings.uppercaseAction === "all") {
              menu.addItem((item) => {
                item.setTitle("Uppercase all files in folder").setIcon("folder-up").onClick(async () => {
                  const confirmed = await this.showQuickConfirmation(
                    `Uppercase all files and folders in "${file.name}"?`,
                    "This will recursively uppercase all files and subfolders. This cannot be undone."
                  );
                  if (confirmed) {
                    await this.uppercaseFilesRecursively(file.path);
                  }
                });
              });
            }
            if (this.settings.capitalizeAction === "all") {
              menu.addItem((item) => {
                item.setTitle("Capitalize all files in folder").setIcon("heading").onClick(async () => {
                  const confirmed = await this.showQuickConfirmation(
                    `Capitalize all files and folders in "${file.name}"?`,
                    "This will recursively capitalize all files and subfolders. This cannot be undone."
                  );
                  if (confirmed) {
                    await this.capitalizeFilesRecursively(file.path);
                  }
                });
              });
            }
          }
        }
      })
    );
    this.addSettingTab(new LowercaseFilesSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async lowercaseSingleItem(file) {
    try {
      const originalName = file.name;
      const lowerCaseName = originalName.toLowerCase();
      if (originalName === lowerCaseName) {
        new import_obsidian.Notice(`"${originalName}" is already lowercase`);
        return;
      }
      if (file instanceof import_obsidian.TFile) {
        await this.processFile(file, "lowercase");
      } else if (file instanceof import_obsidian.TFolder) {
        await this.processFolderRename(file, "lowercase");
      }
      new import_obsidian.Notice(`Renamed "${originalName}" to "${lowerCaseName}"`);
    } catch (error) {
      console.error("Error lowercasing item:", error);
      new import_obsidian.Notice("Error occurred while lowercasing. Check console for details.");
    }
  }
  async uppercaseSingleItem(file) {
    try {
      const originalName = file.name;
      const upperCaseName = originalName.toUpperCase();
      if (originalName === upperCaseName) {
        new import_obsidian.Notice(`"${originalName}" is already uppercase`);
        return;
      }
      if (file instanceof import_obsidian.TFile) {
        await this.processFile(file, "uppercase");
      } else if (file instanceof import_obsidian.TFolder) {
        await this.processFolderRename(file, "uppercase");
      }
      new import_obsidian.Notice(`Renamed "${originalName}" to "${upperCaseName}"`);
    } catch (error) {
      console.error("Error uppercasing item:", error);
      new import_obsidian.Notice("Error occurred while uppercasing. Check console for details.");
    }
  }
  async capitalizeSingleItem(file) {
    try {
      const originalName = file.name;
      const capitalizedName = this.capitalizeFirstLetter(originalName);
      if (originalName === capitalizedName) {
        new import_obsidian.Notice(`"${originalName}" is already capitalized`);
        return;
      }
      if (file instanceof import_obsidian.TFile) {
        await this.processFile(file, "capitalize");
      } else if (file instanceof import_obsidian.TFolder) {
        await this.processFolderRename(file, "capitalize");
      }
      new import_obsidian.Notice(`Renamed "${originalName}" to "${capitalizedName}"`);
    } catch (error) {
      console.error("Error capitalizing item:", error);
      new import_obsidian.Notice("Error occurred while capitalizing. Check console for details.");
    }
  }
  capitalizeFirstLetter(str) {
    if (str.length === 0)
      return str;
    return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();
  }
  async showQuickConfirmation(title, message) {
    return new Promise((resolve) => {
      const modal = new import_obsidian.Modal(this.app);
      const { contentEl } = modal;
      contentEl.createEl("h3", { text: title });
      contentEl.createEl("p", { text: message, cls: "lowercase-files-warning-text" });
      const buttonContainer = contentEl.createDiv("lowercase-files-buttons");
      const cancelButton = buttonContainer.createEl("button", { text: "Cancel" });
      cancelButton.addEventListener("click", () => {
        modal.close();
        resolve(false);
      });
      const confirmButton = buttonContainer.createEl("button", {
        text: "Yes, Proceed",
        cls: "mod-warning"
      });
      confirmButton.addEventListener("click", () => {
        modal.close();
        resolve(true);
      });
      modal.open();
    });
  }
  async lowercaseFilesRecursively(folderPath) {
    await this.processFilesRecursively(folderPath, "lowercase");
  }
  async uppercaseFilesRecursively(folderPath) {
    await this.processFilesRecursively(folderPath, "uppercase");
  }
  async capitalizeFilesRecursively(folderPath) {
    await this.processFilesRecursively(folderPath, "capitalize");
  }
  async processFilesRecursively(folderPath, caseType) {
    const folder = this.app.vault.getAbstractFileByPath(folderPath);
    if (!folder || !(folder instanceof import_obsidian.TFolder)) {
      new import_obsidian.Notice("Invalid folder path");
      return;
    }
    try {
      await this.processFolder(folder, caseType);
      const actionName = caseType === "lowercase" ? "lowercased" : caseType === "uppercase" ? "uppercased" : "capitalized";
      new import_obsidian.Notice(`Successfully ${actionName} all files and folders!`);
    } catch (error) {
      console.error(`Error ${caseType}ing files:`, error);
      new import_obsidian.Notice(`Error occurred while ${caseType}ing files. Check console for details.`);
    }
  }
  async processFolder(folder, caseType) {
    const children = [...folder.children];
    for (const child of children) {
      if (child instanceof import_obsidian.TFile) {
        await this.processFile(child, caseType);
      }
    }
    for (const child of children) {
      if (child instanceof import_obsidian.TFolder) {
        await this.processFolder(child, caseType);
        await this.processFolderRename(child, caseType);
      }
    }
  }
  async processFile(file, caseType) {
    var _a;
    const fileName = file.name;
    let newFileName;
    switch (caseType) {
      case "lowercase":
        newFileName = fileName.toLowerCase();
        break;
      case "uppercase":
        newFileName = fileName.toUpperCase();
        break;
      case "capitalize":
        newFileName = this.capitalizeFirstLetter(fileName);
        break;
    }
    if (fileName !== newFileName) {
      const newPath = path.join(((_a = file.parent) == null ? void 0 : _a.path) || "", newFileName);
      const normalizedNewPath = (0, import_obsidian.normalizePath)(newPath);
      const existingFile = this.app.vault.getAbstractFileByPath(normalizedNewPath);
      if (existingFile && existingFile !== file) {
        console.warn(`Cannot rename ${file.path} to ${normalizedNewPath}: file already exists`);
        new import_obsidian.Notice(`Skipped ${fileName}: ${caseType} version already exists`);
        return;
      }
      try {
        await this.app.vault.rename(file, normalizedNewPath);
        console.log(`Renamed file: ${file.path} -> ${normalizedNewPath}`);
      } catch (error) {
        console.error(`Failed to rename file ${file.path}:`, error);
      }
    }
  }
  async processFolderRename(folder, caseType) {
    var _a;
    const folderName = folder.name;
    let newFolderName;
    switch (caseType) {
      case "lowercase":
        newFolderName = folderName.toLowerCase();
        break;
      case "uppercase":
        newFolderName = folderName.toUpperCase();
        break;
      case "capitalize":
        newFolderName = this.capitalizeFirstLetter(folderName);
        break;
    }
    if (folderName !== newFolderName) {
      const newPath = path.join(((_a = folder.parent) == null ? void 0 : _a.path) || "", newFolderName);
      const normalizedNewPath = (0, import_obsidian.normalizePath)(newPath);
      const existingFolder = this.app.vault.getAbstractFileByPath(normalizedNewPath);
      if (existingFolder && existingFolder !== folder) {
        console.warn(`Cannot rename ${folder.path} to ${normalizedNewPath}: folder already exists`);
        new import_obsidian.Notice(`Skipped ${folderName}: ${caseType} version already exists`);
        return;
      }
      try {
        await this.app.vault.rename(folder, normalizedNewPath);
        console.log(`Renamed folder: ${folder.path} -> ${normalizedNewPath}`);
      } catch (error) {
        console.error(`Failed to rename folder ${folder.path}:`, error);
      }
    }
  }
};
var FolderSelectionModal = class extends import_obsidian.Modal {
  constructor(app, plugin) {
    super(app);
    this.selectedFolder = "";
    this.selectedAction = "lowercase";
    this.plugin = plugin;
    this.selectedFolder = plugin.settings.lastSelectedFolder;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Convert File Case Recursively" });
    contentEl.createEl("p", {
      text: "Select a folder and case conversion type to recursively process all file and folder names within it.",
      cls: "setting-item-description"
    });
    const warningEl = contentEl.createDiv("lowercase-files-warning");
    warningEl.createEl("strong", { text: "\u26A0\uFE0F Warning: " });
    warningEl.createSpan({ text: "This operation cannot be undone. Make sure to backup your files before proceeding." });
    new import_obsidian.Setting(contentEl).setName("Case Conversion Type").setDesc("Choose how to convert the file names").addDropdown((dropdown) => {
      dropdown.addOption("lowercase", "Lowercase").addOption("uppercase", "Uppercase").addOption("capitalize", "Capitalize First Letter").setValue(this.selectedAction).onChange((value) => {
        this.selectedAction = value;
      });
    });
    const folderSetting = new import_obsidian.Setting(contentEl).setName("Select Folder").setDesc("Choose the folder to process").addDropdown((dropdown) => {
      dropdown.addOption("", "/ (Root)");
      const folders = this.app.vault.getAllLoadedFiles().filter((file) => file instanceof import_obsidian.TFolder).map((folder) => folder).sort((a, b) => a.path.localeCompare(b.path));
      folders.forEach((folder) => {
        dropdown.addOption(folder.path, folder.path || "/");
      });
      dropdown.setValue(this.selectedFolder);
      dropdown.onChange((value) => {
        this.selectedFolder = value;
      });
    });
    const buttonContainer = contentEl.createDiv("lowercase-files-buttons");
    const cancelButton = buttonContainer.createEl("button", { text: "Cancel" });
    cancelButton.addEventListener("click", () => {
      this.close();
    });
    const processButton = buttonContainer.createEl("button", {
      text: "Convert Files",
      cls: "mod-cta"
    });
    processButton.addEventListener("click", async () => {
      if (!this.selectedFolder && this.selectedFolder !== "") {
        new import_obsidian.Notice("Please select a folder");
        return;
      }
      this.plugin.settings.lastSelectedFolder = this.selectedFolder;
      await this.plugin.saveSettings();
      const confirmed = await this.showConfirmation();
      if (confirmed) {
        this.close();
        switch (this.selectedAction) {
          case "lowercase":
            await this.plugin.lowercaseFilesRecursively(this.selectedFolder);
            break;
          case "uppercase":
            await this.plugin.uppercaseFilesRecursively(this.selectedFolder);
            break;
          case "capitalize":
            await this.plugin.capitalizeFilesRecursively(this.selectedFolder);
            break;
        }
      }
    });
  }
  async showConfirmation() {
    return new Promise((resolve) => {
      const modal = new import_obsidian.Modal(this.app);
      const { contentEl } = modal;
      const actionText = this.selectedAction === "lowercase" ? "lowercase" : this.selectedAction === "uppercase" ? "uppercase" : "capitalize";
      const actionPastTense = this.selectedAction === "lowercase" ? "Lowercase" : this.selectedAction === "uppercase" ? "Uppercase" : "Capitalize";
      contentEl.createEl("h3", { text: "Confirm Operation" });
      contentEl.createEl("p", {
        text: `Are you sure you want to ${actionText} all files and folders in "${this.selectedFolder || "Root"}"?`
      });
      contentEl.createEl("p", {
        text: "This operation cannot be undone.",
        cls: "lowercase-files-warning-text"
      });
      const buttonContainer = contentEl.createDiv("lowercase-files-buttons");
      const cancelButton = buttonContainer.createEl("button", { text: "Cancel" });
      cancelButton.addEventListener("click", () => {
        modal.close();
        resolve(false);
      });
      const confirmButton = buttonContainer.createEl("button", {
        text: `Yes, ${actionPastTense} Files`,
        cls: "mod-warning"
      });
      confirmButton.addEventListener("click", () => {
        modal.close();
        resolve(true);
      });
      modal.open();
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var LowercaseFilesSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "File Case Converter Settings" });
    new import_obsidian.Setting(containerEl).setName("Lowercase Action").setDesc("Choose what the lowercase operation should do").addDropdown((dropdown) => dropdown.addOption("name", "Lowercase name only").addOption("all", "Lowercase all files in folder").setValue(this.plugin.settings.lowercaseAction).onChange(async (value) => {
      this.plugin.settings.lowercaseAction = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Uppercase Action").setDesc("Choose what the uppercase operation should do").addDropdown((dropdown) => dropdown.addOption("name", "Uppercase name only").addOption("all", "Uppercase all files in folder").setValue(this.plugin.settings.uppercaseAction).onChange(async (value) => {
      this.plugin.settings.uppercaseAction = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Capitalize Action").setDesc("Choose what the capitalize operation should do").addDropdown((dropdown) => dropdown.addOption("name", "Capitalize name only").addOption("all", "Capitalize all files in folder").setValue(this.plugin.settings.capitalizeAction).onChange(async (value) => {
      this.plugin.settings.capitalizeAction = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Last Selected Folder").setDesc("The folder that was last selected for processing").addText((text) => text.setPlaceholder("No folder selected").setValue(this.plugin.settings.lastSelectedFolder).setDisabled(true));
    containerEl.createEl("h3", { text: "About" });
    containerEl.createEl("p", {
      text: "This plugin converts file and folder name cases (lowercase, uppercase, capitalize first letter) either for single items or recursively for all files in a folder. Use with caution as these operations cannot be undone."
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
